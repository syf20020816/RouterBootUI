@use "./src/mixins/mixins.scss" as *;
@use "./src/common/var.scss" as *;
@use "sass:map";

$component: "weather";

@include buildContainer($component) {
  display: inline-block;
  cursor: pointer;
  border-radius: 6px;
  transition: all 0.4s ease-in-out;
  margin: $margin-heavy-common;
  @at-root {
    @include when($component, $l) {
      height: 40vh;
      width: 18vw;
      font-size: $font-default-size-flex;
      @include buildWrap($component, "top") {
        height: calc(15% - 2 * $padding-default-h);
        width: calc(100% - 2 * $padding-default-w);
        padding: $padding-default-h $padding-default-w;
        display: flex;
        align-items: center;
        justify-content: flex-start;
      }
      @include buildWrap($component, "mid") {
        height: calc(55% - 2 * $padding-default-h);
        width: calc(100% - 2 * $padding-default-w);
        padding: $padding-default-h $padding-default-w;
        display: flex;
        align-items: flex-start;
        justify-content: center;
        flex-wrap: wrap;
        align-content: space-between;
        @include build($component, "icon") {
          width: auto;
          height: 65%;
          vertical-align: -0.15em;
          fill: currentColor;
          overflow: hidden;
          transition: all 0.4s ease-in-out;
          &:hover {
            transform: scale(0.9);
          }
        }
        @include buildWrap($component, "temperature") {
          width: inherit;
          height: 35%;
          display: flex;
          align-items: flex-end;
          justify-content: center;
        }
      }
      @include buildWrap($component, "bottom") {
        height: calc(30% - 2 * $padding-default-h);
        width: calc(100% - 2 * $padding-default-w);
        padding: $padding-default-h $padding-default-w;
        display: flex;
        align-items: flex-start;
        align-content: space-around;
        justify-content: center;
        flex-wrap: wrap;
        @include buildWrap($component, "value") {
          height: 40%;
          width: inherit;
          display: flex;
          align-items: center;
          justify-content: center;
        }
      }
    }
    @include when($component, $m) {
      height: 18vh;
      width: 16.5vw;
      font-size: $font-small-size-flex;
      @include buildWrap($component, "box") {
        height: inherit;
        width: inherit;
        display: flex;
        align-items: center;
        justify-content: space-between;
        flex-wrap: wrap;
        @include buildWrap($component, "left") {
          height: calc(70% - 2 * $padding-default-h);
          width: calc(55% - 2 * $padding-default-w);
          padding: $padding-default-h $padding-default-w;
          display: flex;
          align-items: center;
          justify-content: flex-start;
          flex-wrap: wrap;
          @include buildWrap($component, "pos") {
            height: 30%;
            width: 100%;
            display: flex;
            align-items: center;
            justify-content: flex-start;
          }
          @include buildWrap($component, "value") {
            height: 70%;
            width: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            line-height: 1.5em;
          }
        }
        @include buildWrap($component, "right") {
          height: calc(70% - 2 * $padding-default-h);
          width: calc(45% - 2 * $padding-default-w);
          padding: $padding-default-h $padding-default-w;
          display: flex;
          align-items: flex-start;
          justify-content: center;
          flex-wrap: wrap;
          align-content: space-between;
          @include build($component, "icon") {
            width: auto;
            height: 70%;
            vertical-align: -0.15em;
            fill: currentColor;
            overflow: hidden;
            transition: all 0.4s ease-in-out;
            &:hover {
              transform: scale(0.9);
            }
          }
          @include buildWrap($component, "temperature") {
            width: 100%;
            height: 30%;
            display: flex;
            align-items: center;
            justify-content: center;
          }
        }
        @include buildWrap($component, "bottom") {
          height: calc(30% - 2 * $padding-default-h);
          width: 100%;
          padding: $padding-default-h 0;
          display: flex;
          align-items: center;
          justify-content: center;
        }
      }
    }
    @include when($component, $s) {
      height: 16vh;
      width: 3.5vw;
      border-radius: 20vh;
      font-size: $font-large-size-flex;
      @include buildWrap($component, "top") {
        height: calc(30% - 2 * $padding-default-h);
        width: calc(100% );
        padding: $padding-default-h 0;
        display: flex;
        align-items: center;
        justify-content: center;
        
      }
      @include buildWrap($component, "mid") {
        height: calc(40% - 2 * $padding-default-h);
        width: calc(100% - 2 * $padding-default-w);
        padding: $padding-default-h $padding-default-w;
        display: flex;
        align-items: flex-start;
        justify-content: center;
        flex-wrap: wrap;
        align-content: space-between;
        @include build($component, "icon") {
          width: auto;
          height: 95%;
          vertical-align: -0.15em;
          fill: currentColor;
          overflow: hidden;
          transition: all 0.4s ease-in-out;
          &:hover {
            transform: scale(0.9);
          }
        }
        
      }
      @include buildWrap($component, "bottom") {
        height: calc(30% - 2 * $padding-default-h);
        width: calc(100%);
        padding: $padding-default-h 0;
        display: flex;
        align-items: center;
        justify-content: center;
      }
    }
    @each $type in $theme-types {
      @include when($component, $type) {
        background-color: map-get($colors, $type);
        color: map-get($font-colors, $type);
        box-shadow: 0px 0px 1px 2px map-get($shadow-colors, $type, "deep"),
          0px 0px 1px 1px map-get($shadow-colors, $type, "weak");
        &:hover {
          filter: brightness(1.2);
        }
      }
    }
  }
}
